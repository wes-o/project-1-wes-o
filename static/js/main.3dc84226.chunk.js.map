{"version":3,"sources":["components/Home.tsx","components/user/Create.tsx","components/user/Edit.tsx","components/reimbursement/Create.tsx","components/reimbursement/Edit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","props","state","users","reimbursements","Promise","all","axios","get","firstReq","secondReq","this","setState","data","id","delete","then","_data","index","findIndex","user","splice","history","push","reimbursement","length","className","scope","map","key","first_name","last_name","email","phone","address","description","style","marginBottom","to","onClick","deleteUser","r","reimbursement_id","date_submitted","date_resolved","status","reimbursement_type","deleteReimbursement","React","CreateUser","processFormSubmission","e","preventDefault","loading","formData","submitSuccess","values","post","setTimeout","handleInputChanges","currentTarget","name","value","role","onSubmit","noValidate","htmlFor","type","onChange","placeholder","withRouter","EditUser","a","async","patch","setValues","match","params","defaultValue","CreateReimbursement","data_submitted","EditReimbursement","App","path","exact","component","title","href","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dc84226.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport axios from 'axios';\n\n\ninterface IState {\n    users: any[] \n    reimbursements: any[]\n}\n\nexport default class Home extends React.Component<RouteComponentProps, IState> {\n    constructor(props: RouteComponentProps) {\n        super(props);\n        this.state = { users: [] , reimbursements: [] }\n    }\n\n    // public componentDidMount(): void {\n    //     axios.get(`http://localhost:5000/users`).then(data => {\n    //         this.setState({ users: data.data })\n    //     });\n    // }\n    // public componentDidMount(): void {\n    //     axios.get(`http://localhost:5000/reimbursements`).then(data => {\n    //         this.setState({ reimbursements: data.data })\n    //     })\n    // }\n\n    // It may be helpful to test these one at a time to isolate 'state'\n\n    // public getUsers = () => {\n    //     const data = axios.get(`http://localhost:5000/users`);\n    //         return data;    \n    //     //this.setState({ users: data.data });\n    // }\n\n    // public getReimbursements = () => {\n    //     const data = axios.get(`http://localhost:5000/reimbursements`);\n    //         return data;\n    //     //this.setState({ reimbursements: data.data });\n    // }\n\n    // Perform multiple concurrent requests \n    public async componentDidMount() {\n        const [firstReq, secondReq] = await Promise.all([\n            axios.get(`http://localhost:5000/users`),\n            axios.get(`http://localhost:5000/reimbursements`)\n        ])\n        this.setState({\n            users: firstReq.data,\n            reimbursements: secondReq.data });   \n    }\n\n    public deleteUser(id: number) {\n        axios.delete(`http://localhost:5000/users/${id}`).then(_data => {\n            const index = this.state.users.findIndex(user => user.id === id);\n            this.state.users.splice(index, 1);\n            this.props.history.push('/');\n        })\n    }\n\n    public deleteReimbursement(id: number) {\n        axios.delete(`http://localhost:5000/reimbursements/${id}`).then(_data => {\n            const index = this.state.reimbursements.findIndex(reimbursement => reimbursement.id === id);\n            this.state.reimbursements.splice(index, 1);\n            this.props.history.push('/');\n        })\n    }\n\n    public render() {\n        const users = this.state.users;\n        const reimbursements = this.state.reimbursements;\n        return (\n            <div>\n                {users.length === 0 && (\n                    <div className=\"text-center\">\n                        <p><em>No user profile available</em><br />\n                            <span>Please log in to view</span>    \n                        </p>\n                    </div>\n                )}\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-light\">\n                                <tr>\n                                    <th scope=\"col\">First Name</th>\n                                    <th scope=\"col\">Last Name</th>\n                                    <th scope=\"col\">Email</th>\n                                    <th scope=\"col\">Phone</th>\n                                    <th scope=\"col\">Address</th>\n                                    <th scope=\"col\">Description</th>\n                                    <th scope=\"col\">Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {users && users.map(user =>\n                                    <tr key={user.id}>\n                                        <td>{user.first_name}</td>\n                                        <td>{user.last_name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.phone}</td>\n                                        <td>{user.address}</td>\n                                        <td>{user.description}</td>\n                                        <td>\n                                            <div className=\"d-flex justify-content-between align-items-center\">\n                                                <div className=\"btn-group\" style={{ marginBottom: \"20px\" }}>\n                                                    <Link to={`edit/${user.id}`} className=\"btn btn-sm btn-outline-secondary\">Edit User </Link>\n                                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.deleteUser(user.id)}>Delete User</button>\n                                                </div>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                \n                <div id=\"break\"> \n                </div>\n\n                {reimbursements.length === 0 && (\n                    <div className=\"text-center\">\n                        <h3>&#9885; Reimbursement &#9885;</h3>\n                        <p><em>No reimbursements available</em><br />\n                            <span>Please log in to view</span>\n                        </p>\n                    </div>\n                )}\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-light\">\n                                <tr>\n                                    <th scope=\"col\">First Name</th>\n                                    <th scope=\"col\">Last Name</th>\n                                    <th scope=\"col\">Date Submitted</th>\n                                    <th scope=\"col\">Date Resolved</th>\n                                    <th scope=\"col\">Status</th>\n                                    <th scope=\"col\">Description</th>\n                                    <th scope=\"col\">Reimbursement Type</th>\n                                    <th scope=\"col\">Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {reimbursements && reimbursements.map(r =>\n                                    <tr key={r.reimbursement_id}>\n                                        <td>{r.first_name}</td>\n                                        <td>{r.last_name}</td>\n                                        <td>{r.date_submitted}</td>\n                                        <td>{r.date_resolved}</td>\n                                        <td>{r.status}</td>\n                                        <td>{r.description}</td>\n                                        <td>{r.reimbursement_type}</td>\n                                        <td>\n                                            <div className=\"d-flex justify-content-between align-items-center\">\n                                                <div className=\"btn-group\" style={{ marginBottom: \"10px\" }}>\n                                                    <Link to={`reimbursement/edit/${r.reimbursement_id}`} className=\"btn btn-sm btn-outline-secondary\">Edit Reimbursement </Link>\n                                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.deleteReimbursement(r.reimbursement_id)}>Delete Reimbursement</button>\n                                                </div>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n            </div>\n            \n        )\n    }\n}\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nexport interface IValues {\n    first_name: string,\n    last_name: string,\n    email: string,\n    phone: string,\n    address: string,\n    description: string,\n}\n\nexport interface IFormState {\n    [key: string]: any;\n    values: IValues[];\n    submitSuccess: boolean;\n    loading: boolean;\n}\n\nclass CreateUser extends React.Component<RouteComponentProps, IFormState> {\n    constructor(props: RouteComponentProps) {\n        super(props);\n        this.state = {\n            values: [],\n            first_name: '',\n            last_name: '',\n            email: '',\n            phone: '',\n            address: '',\n            description: '',\n            loading: false,\n            submitSuccess: false,\n        }\n    }\n\n    private processFormSubmission = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        this.setState({ loading: true });\n\n        const formData = {\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            email: this.state.email,\n            phone: this.state.phone,\n            address: this.state.address,\n            description: this.state.description,\n        }\n\n        this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\n\n        axios.post(`http://localhost:5000/users`, formData).then(_data => [\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 1500)\n        ]);\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        this.setState({\n            [e.currentTarget.name]: e.currentTarget.value,\n        })\n    }\n\n    public render() {\n        const { submitSuccess, loading } = this.state;\n        return (\n            <div>\n                <div className={\"col-md-12 form-wrapper\"}>\n                    <h2> Create User </h2>\n                    {!submitSuccess && (\n                        <div className=\"alert alert-info\" role=\"alert\">\n                            Fill the form below with user information\n                    </div>\n                    )}\n\n                    {submitSuccess && (\n                        <div className=\"alert alert-info\" role=\"alert\">\n                            The form was successfully submitted!\n                            </div>\n                    )}\n\n                    <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"first_name\"> First Name </label>\n                            <input type=\"text\" id=\"first_name\" onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter user's first name\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"last_name\"> Last Name </label>\n                            <input type=\"text\" id=\"last_name\" onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter user's last name\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"email\"> Email </label>\n                            <input type=\"email\" id=\"email\" onChange={(e) => this.handleInputChanges(e)} name=\"email\" className=\"form-control\" placeholder=\"Enter user's email address\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"phone\"> Phone </label>\n                            <input type=\"tel\" id=\"phone\" onChange={(e) => this.handleInputChanges(e)} name=\"phone\" className=\"form-control\" placeholder=\"Enter user's phone number\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"address\"> Address </label>\n                            <input type=\"text\" id=\"address\" onChange={(e) => this.handleInputChanges(e)} name=\"address\" className=\"form-control\" placeholder=\"Enter user's address\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"description\"> Description </label>\n                            <input type=\"text\" id=\"description\" onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\n                        </div>\n\n                        <div className=\"form-group col-md-4 pull-right\">\n                            <button className=\"btn btn-success\" type=\"submit\">Create User</button>\n                            {loading &&\n                                <span className=\"fa fa-circle-o-notch fa-spin\" />\n                            }\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(CreateUser);\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nexport interface IValues {\n    [key: string]: any;\n}\n\nexport interface IFormState {\n    id: number,\n    user: any;\n    values: IValues[];\n    submitSuccess: boolean;\n    loading: boolean;\n}\n\nclass EditUser extends React.Component<RouteComponentProps<any>, IFormState> {\n    constructor(props: RouteComponentProps) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            user: {},\n            values: [],\n            loading: false,\n            submitSuccess: false,\n        }\n    }\n\n    public componentDidMount(): void {\n        axios.get(`http://localhost:5000/users/${this.state.id}`).then(data => {\n            this.setState({ user: data.data });\n        })\n    }\n\n    private processFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\n        e.preventDefault();\n        this.setState({ loading: true });\n        axios.patch(`http://localhost:5000/users/${this.state.id}`, this.state.values).then(_data => {\n            this.setState({ submitSuccess: true, loading: false })\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 1500)\n        })\n    }\n\n\n    private setValues = (values: IValues) => {\n        this.setState({ values: { ...this.state.values, ...values } });\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        this.setValues({ [e.currentTarget.id]: e.currentTarget.value })\n    }\n\n    public render() {\n        const { submitSuccess, loading } = this.state;\n        return (\n            <div className=\"App\">\n                {this.state.user &&\n                    <div>\n                        <h1> User Dashboard</h1>\n                        <p> Please include all necessary information</p>\n                        <div>\n                            <div className={\"col-md-12 form-wrapper\"}>\n                                <h2> Edit User </h2>\n\n                                {submitSuccess && (\n                                    <div className=\"alert alert-info\" role=\"alert\">\n                                        User's details were edited successfully </div>\n                                )}\n\n                                <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"first_name\"> First Name </label>\n                                        <input type=\"text\" id=\"first_name\" defaultValue={this.state.user.first_name} onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter user's first name\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"last_name\"> Last Name </label>\n                                        <input type=\"text\" id=\"last_name\" defaultValue={this.state.user.last_name} onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter user's last name\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"email\"> Email </label>\n                                        <input type=\"email\" id=\"email\" defaultValue={this.state.user.email} onChange={(e) => this.handleInputChanges(e)} name=\"email\" className=\"form-control\" placeholder=\"Enter user's email address\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"phone\"> Phone </label>\n                                        <input type=\"text\" id=\"phone\" defaultValue={this.state.user.phone} onChange={(e) => this.handleInputChanges(e)} name=\"phone\" className=\"form-control\" placeholder=\"Enter user's phone number\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"address\"> Address </label>\n                                        <input type=\"text\" id=\"address\" defaultValue={this.state.user.address} onChange={(e) => this.handleInputChanges(e)} name=\"address\" className=\"form-control\" placeholder=\"Enter user's address\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"description\"> Description </label>\n                                        <input type=\"text\" id=\"description\" defaultValue={this.state.user.description} onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-4 pull-right\">\n                                        <button className=\"btn btn-success\" type=\"submit\">\n                                            Edit User </button>\n                                        {loading &&\n                                            <span className=\"fa fa-circle-o-notch fa-spin\" />\n                                        }\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default withRouter(EditUser);\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\n\nexport interface DateInterface extends Date {\n    currentTime: Date;\n}\n\nexport interface IValues {\n    first_name: string,\n    last_name: string,\n    data_submitted: DateInterface[],\n    date_resolved: string;\n    status: string;\n    description: string,\n    reimbursement_type: number\n}\n\nexport interface IFormState {\n    [key: string]: any;\n    values: IValues[];\n    submitSuccess: boolean;\n    loading: boolean;\n}\n\nclass CreateReimbursement extends React.Component<RouteComponentProps, IFormState> {\n    constructor(props: RouteComponentProps) {\n        super(props);\n        this.state = {\n            values: [],\n            first_name: '',\n            last_name: '',\n            data_submitted: '',\n            date_resolved: '',\n            status: '',\n            description: '',\n            reimbursement_type: '',\n            loading: false,\n            submitSuccess: false,\n        }\n    }\n\n    private processFormSubmission = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        this.setState({ loading: true });\n\n        const formData = {\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            data_submitted: this.state.date_submitted,\n            date_resolved: this.state.date_resolved,\n            status: this.state.status,\n            description: this.state.description,\n            reimbursement_type: this.state.reimbursement_type\n        }\n\n        this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\n\n        axios.post(`http://localhost:5000/reimbursements`, formData).then(data => [\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 1500)\n        ]);\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        this.setState({\n            [e.currentTarget.name]: e.currentTarget.value,\n        })\n    }\n\n    public render() {\n        const { submitSuccess, loading } = this.state;\n        return (\n            <div>\n                <div className={\"col-md-12 form-wrapper\"}>\n                    <h2> Create Reimbursement </h2>\n                    {!submitSuccess && (\n                        <div className=\"alert alert-info\" role=\"alert\">\n                            Fill the form below to create a new reimbursement\n                    </div>\n                    )}\n\n                    {submitSuccess && (\n                        <div className=\"alert alert-info\" role=\"alert\">\n                            The reimbursement was successfully submitted!\n                            </div>\n                    )}\n\n                    <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"first_name\"> First Name </label>\n                            <input type=\"text\" id=\"first_name\" onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter your first name\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"last_name\"> Last Name </label>\n                            <input type=\"text\" id=\"last_name\" onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter your last name\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"date_submitted\"> Date Submitted </label>\n                            <input type=\"date\" id=\"date_submitted\" onChange={(e) => this.handleInputChanges(e)} name=\"date_submitted\" className=\"form-control\" placeholder=\"Enter Date\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"date_resolved\"> Date Resolved </label>\n                            <input type=\"text\" id=\"date_resolved\" onChange={(e) => this.handleInputChanges(e)} name=\"date_resolved\" className=\"form-control\" placeholder=\"Enter Date.. to be resolved\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"status\"> Status </label>\n                            <input type=\"text\" id=\"status\" onChange={(e) => this.handleInputChanges(e)} name=\"status\" className=\"form-control\" placeholder=\"Enter Status\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"description\"> Description </label>\n                            <input type=\"text\" id=\"description\" onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\n                        </div>\n\n                        <div className=\"form-check form-group col-md-12\">\n                        <label htmlFor=\"reimbursement_type\"> Reimbursement Type </label>\n                        <input type=\"text\" id=\"reimbursement_type\" onChange={(e) => this.handleInputChanges(e)} name=\"reimbursement_type\" className=\"form-control\" placeholder=\"Enter the type of Reimbursement\" />\n                            <label>Options Available: </label>\n                            <select>\n                                <option value=\"Food\">Food</option>\n                                <option value=\"Lodging\">Lodging</option>\n                                <option value=\"Travel\">Travel</option>\n                                <option value=\"Other\">Other</option>\n                            </select>\n                        </div>\n\n                        <div className=\"form-group col-md-4 pull-right\">\n                            <button className=\"btn btn-success\" type=\"submit\">Create Reimbursement</button>\n                            {loading &&\n                                <span className=\"fa fa-circle-o-notch fa-spin\" />\n                            }\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(CreateReimbursement);\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nexport interface IValues {\n    [key: string]: any;\n}\n\nexport interface IFormState {\n    reimbursement_id: number,\n    reimbursement: any;\n    values: IValues[];\n    submitSuccess: boolean;\n    loading: boolean;\n}\n\nclass EditReimbursement extends React.Component<RouteComponentProps<any>, IFormState> {\n    constructor(props: RouteComponentProps) {\n        super(props);\n        this.state = {\n            reimbursement_id: this.props.match.params.reimbursement_id,\n            reimbursement: {},\n            values: [],\n            loading: false,\n            submitSuccess: false,\n        }\n    }\n\n    public componentDidMount(): void {\n        axios.get(`http://localhost:5000/reimbursements/${this.state.reimbursement_id}`).then(data => {\n            this.setState({ reimbursement: data.data });\n        })\n    }\n\n    private processFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\n        e.preventDefault();\n        this.setState({ loading: true });\n        axios.patch(`http://localhost:5000/reimbursements/${this.state.reimbursement_id}`, this.state.values).then(_data => {\n            this.setState({ submitSuccess: true, loading: false })\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 1500)\n        })\n    }\n\n\n    private setValues = (values: IValues) => {\n        this.setState({ values: { ...this.state.values, ...values } });\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        this.setValues({ [e.currentTarget.id]: e.currentTarget.value })\n    }\n\n    public render() {\n        const { submitSuccess, loading } = this.state;\n        return (\n            <div className=\"App\">\n                {this.state.reimbursement &&\n                    <div>\n                        <h1> Reimbursement Management </h1>\n                        <p>Please include all necessary fields</p>\n                        <div>\n                        <div className={\"col-md-12 form-wrapper\"}>\n                            <h2>Edit Reimbursement</h2>\n\n                            {submitSuccess && (\n                                <div className=\"alert alert-info\" role=\"alert\">\n                                    Reimbursement was edited successfully </div>\n                            )}\n\n                                <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"first_name\"> First Name </label>\n                                        <input type=\"text\" id=\"first_name\" onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter your first name\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"last_name\"> Last Name </label>\n                                        <input type=\"text\" id=\"last_name\" onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter your last name\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"date_submitted\"> Date Submitted </label>\n                                        <input type=\"date\" id=\"date_submitted\" onChange={(e) => this.handleInputChanges(e)} name=\"date_submitted\" className=\"form-control\" placeholder=\"Enter Date\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"date_resolved\"> Date Resolved </label>\n                                        <input type=\"text\" id=\"date_resolved\" onChange={(e) => this.handleInputChanges(e)} name=\"date_resolved\" className=\"form-control\" placeholder=\"Enter Date.. to be resolved\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"status\"> Status </label>\n                                        <input type=\"text\" id=\"status\" onChange={(e) => this.handleInputChanges(e)} name=\"status\" className=\"form-control\" placeholder=\"Enter Status\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"description\"> Description </label>\n                                        <input type=\"text\" id=\"description\" onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"reimbursement_type\"> Reimbursement Type </label>\n                                        <input type=\"text\" id=\"reimbursement_type\" onChange={(e) => this.handleInputChanges(e)} name=\"reimbursement_type\" className=\"form-control\" placeholder=\"Enter the type of Reimbursement\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-4 pull-right\">\n                                        <button className=\"btn btn-success\" type=\"submit\">\n                                            Edit Reimbursement </button>\n                                        {loading &&\n                                            <span className=\"fa fa-circle-o-notch fa-spin\" />\n                                        }\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default withRouter(EditReimbursement);\n","import * as React from 'react';\nimport './App.css';\nimport { Switch, Route, withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport Home from './components/Home';\nimport CreateUser from './components/user/Create';\nimport EditUser from './components/user/Edit';\nimport CreateReimbursement from './components/reimbursement/Create';\nimport EditReimbursement from './components/reimbursement/Edit';\n\n\nclass App extends React.Component<RouteComponentProps<any>> {\n  public render() {\n    return (\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to={'/'}> Home </Link>\n            </li>\n            <li>\n              <Link to={'/create'}> Create User </Link>\n            </li>\n            <li>\n              <Link to={'/reimbursement'}> Create Reimbursement </Link>\n            </li>\n          </ul>\n        </nav>\n        <h2>&#9885; Dashboard &#9885;</h2>\n  \n        <Switch>\n          <Route path={'/'} exact component={Home} />\n          <Route path={'/create'} exact component={CreateUser} />\n          <Route path={'/edit/:id'} exact component={EditUser} />\n          <Route path={'/reimbursement'} exact component={CreateReimbursement} />\n          <Route path={'/reimbursement/edit/:reimbursement_id'} exact component={EditReimbursement} />\n        </Switch>\n\n        <address>\n          <strong>\n            <em>Expense Reimbursement System</em>\n          </strong>\n          <p>\n            <abbr title=\"UI\">User Interface</abbr>\n          </p>\n        </address>\n\n        <div>\n          <footer className=\"footer\">\n            <div>\n              Wes Oler Copyright &copy; 2019\n            <p>Created and Maintained by <a href=\"https://github.com/wes-o\">Wes O</a></p>\n            </div>\n          </footer>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}